def matpuntos(FILAS, COLUMNAS):
    matResp = []
    for _ in range(FILAS):
        fila = []
        for _ in range(COLUMNAS):
            fila.append(".")
        matResp.append(fila)
    return matResp


def imprime_arreglo(q):
    print()
    for i in range(len(q)):
        for j in range(len(q[-1])):
            print(q[i][j], end=' ')
        print()
    print()


def recibe_pieza():
    matriz = []
    for i in range(4):
        z = []
        a = input()
        for i in a:
            z.append(i)
        matriz.append(z)
    return matriz


def clonar_matriz(matriz):
    hija = []
    for i in matriz:
        hija.append(i.copy())
    return hija


def cordenadas_pieza(pieza):
    cord = []
    for i in range(len(pieza)):
        for j in range(len(pieza[-1])):
            if pieza[i][j] != ".":
                cord.append([i, j])
    return cord


def tope_abajo(tablero):
    for i in range(len(tablero)-1, 0, -1):
        for j in range(len(tablero[-1])):
            if tablero[i][j] != ".":
                return i


def tope_derecha(tablero):
    for j in range(len(tablero[-1])-1, 0, -1):
        for i in range(len(tablero)):
            if tablero[i][j] != ".":
                return j


def tope_izquierda(tablero):
    for j in range(len(tablero[-1])):
        for i in range(len(tablero)):
            if tablero[i][j] != ".":
                return j


def largo_pieza(pieza):
    lp = tope_derecha(pieza) - tope_izquierda(pieza) + 1
    return lp


def normalizar_pieza(pieza):
    nueva_matriz = matpuntos(len(pieza), len(pieza[-1]))
    cord = cordenadas_pieza(pieza)
    limite_superior = cord[0][0]
    limite_izquierdo = tope_izquierda(pieza)
    for i, j in cord:
        nueva_matriz[i-limite_superior][j-limite_izquierdo] = pieza[i][j]
    return nueva_matriz


def verificar_sumaMatrices(tablero1, tablero2):
    cord = cordenadas_pieza(tablero2)
    c = 0
    for i, j in cord:
        if tablero1[i][j] == ".":
            c += 1
    if c == len(cord):
        return True
    return False


def sumaMatrices(m1, m2):
    cord = cordenadas_pieza(m2)
    for i, j in cord:
        m1[i][j] = m2[i][j]
    return m1


def piezas_en_tablero(tablero):
    c = 0
    for i in range(len(tablero)):
        for j in range(len(tablero[-1])):
            if tablero[i][j] != ".":
                c += 1
    c = c//5
    return c


def es_solucion(tablero):
    for i in range(len(tablero)):
        for j in range(len(tablero[-1])):
            if tablero[i][j] == ".":
                return False
    return True


def transpuesta(mat):
    F = len(mat)
    C = len(mat[-1])
    resp = matpuntos(C, F)
    for i in range(F):
        for j in range(C):
            resp[j][i] = mat[i][j]
    return resp


def Swap(ma):
    m_reflex = matpuntos(len(ma), len(ma[-1]))
    for i in range(len(ma)):
        for j in range(len(ma[-1])):
            m_reflex[i][j] = ma[i][len(ma)-j-1]
    return m_reflex


def rotar(a, m):
    for i in range(a):
        m = normalizar_pieza(Swap(transpuesta(m)))
    return m


def esta_en_lista(matriz, lista):
    for elem in lista:
        if matriz == elem:
            return True
    return False

def rotaciones(k, pieza):
    if k == 0:
        return pieza
    if k == 4:
        return normalizar_pieza(Swap(rotar(1, pieza)))
    else:
        return rotar(1, pieza)


def Posiciones(tablero, pieza):
    pos = []
    tablero_puntos = clonar_matriz(tablero)
    for k in range(8):
        pieza = rotaciones(k, pieza)
        cord = cordenadas_pieza(pieza)
        l_pieza = largo_pieza(pieza)
        h_pieza = cord[-1][0] - cord[0][0] + 1
        for y in range(len(tablero)-h_pieza+1):
            for x in range(len(tablero[-1])-l_pieza+1):
                tablero = clonar_matriz(tablero_puntos)
                for i, j in cord:
                    tablero[i + y][j + x] = pieza[i][j]
                if not esta_en_lista(tablero, pos):
                    pos.append(tablero)
    return pos


def hijos(pieza, raiz):
    resp = []
    tablero = matpuntos(len(raiz), len(raiz[-1]))
    pos = Posiciones(tablero, pieza)
    for elem in pos:
        if verificar_sumaMatrices(raiz, elem):
            hijo = sumaMatrices(clonar_matriz(raiz), clonar_matriz(elem))
            if not esta_en_lista(hijo, resp):
                resp.append(hijo)
    return resp


def funcion_pila(lista_piezas):
    pila = []
    pila.append(matpuntos(5, 6))
    while pila != []:
        tope = pila.pop()
        if (es_solucion(tope)):
            print("La soluci√≥n es:")
            return tope
        elif piezas_en_tablero(tope) == len(lista_piezas):
            pila.pop()
        elif piezas_en_tablero(tope) < len(lista_piezas):
            for hijo in hijos(lista_piezas[piezas_en_tablero(tope)], tope):
                if not esta_en_lista(hijo,pila):
                    imprime_arreglo(hijo)
                    pila.append(hijo)
    return "fallo"


def entrada(n):
    lista_piezas = []
    for i in range(n):
        matriz_entrada = recibe_pieza()
        lista_piezas.append(matriz_entrada)
        print()
    return lista_piezas


tablero_ejemplo = [[".", "+", ".", ".", ".", "."],
                   [".", "+", "+", ".", ".", "."],
                   [".", "+", ".", ".", ".", "."],
                   [".", "+", ".", ".", ".", "."],
                   [".", ".", ".", ".", ".", "."]]

pieza_ejemplo = [["#", "#", ".", "."],
                 [".", "#", "#", "#"],
                 [".", ".", ".", "."],
                 [".", ".", ".", "."]]


#hijos = hijos(pieza_ejemplo, tablero_ejemplo)
#print("---------------------------")
#print("Elementos en hijos:")
#print("---------------------------")
#for elem in hijos:
    #imprime_arreglo(elem)
#print("La cantidad de elementos en hijos es:", len(hijos))

imprime_arreglo(funcion_pila(entrada(2)))
